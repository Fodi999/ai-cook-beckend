use axum::{
    extract::{State, Json, Path},
    response::Json as ResponseJson,
};
use serde::{Deserialize, Serialize};
use uuid::Uuid;
use chrono::Utc;

use crate::services::personal_health_assistant::{PersonalHealthAssistant, HealthContext, UserHealthSummary, NutritionSummary, PersonalizedResponse};
use crate::services::ai::AiService;
use crate::models::health::*;
use crate::utils::errors::AppError;

#[derive(Debug, Deserialize)]
pub struct PersonalChatRequest {
    pub message: String,
    pub include_health_context: Option<bool>,
}

#[derive(Debug, Deserialize)]
pub struct WellbeingCheckRequest {
    pub mood_score: Option<i32>,
    pub energy_level: Option<i32>,
    pub stress_level: Option<i32>,
    pub sleep_hours: Option<f32>,
    pub sleep_quality: Option<i32>,
    pub water_intake_ml: Option<i32>,
    pub exercise_minutes: Option<i32>,
    pub notes: Option<String>,
    pub symptoms: Vec<String>,
}

#[derive(Debug, Serialize)]
pub struct HealthDashboardResponse {
    pub current_wellbeing: Option<DailyWellbeing>,
    pub insights: Vec<HealthInsight>,
    pub recommendations: Vec<PersonalizedRecommendation>,
    pub weekly_trends: WeeklyTrends,
    pub motivational_message: String,
}

#[derive(Debug, Serialize)]
pub struct WeeklyTrends {
    pub avg_mood: f32,
    pub avg_energy: f32,
    pub avg_stress: f32,
    pub avg_sleep: f32,
    pub total_water_ml: i32,
    pub total_exercise_minutes: i32,
}

/// –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ç —Å –∑–∞–±–æ—Ç–ª–∏–≤—ã–º –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–æ–º
pub async fn personal_health_chat(
    State(ai_service): State<AiService>,
    Json(request): Json<PersonalChatRequest>,
) -> Result<ResponseJson<PersonalizedResponse>, AppError> {
    let assistant = PersonalHealthAssistant::new(ai_service);
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    let health_context = create_mock_health_context();
    
    let response = assistant.get_personalized_response(&request.message, &health_context).await?;
    
    Ok(ResponseJson(response))
}

/// –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è
pub async fn daily_wellbeing_check(
    State(ai_service): State<AiService>,
    Json(request): Json<WellbeingCheckRequest>,
) -> Result<ResponseJson<PersonalizedResponse>, AppError> {
    let assistant = PersonalHealthAssistant::new(ai_service);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏
    let wellbeing = DailyWellbeing {
        id: Uuid::new_v4(),
        user_id: Uuid::new_v4(), // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - ID –∏–∑ —Ç–æ–∫–µ–Ω–∞
        date: Utc::now(),
        mood_score: request.mood_score,
        energy_level: request.energy_level,
        stress_level: request.stress_level,
        sleep_hours: request.sleep_hours,
        sleep_quality: request.sleep_quality,
        water_intake_ml: request.water_intake_ml,
        exercise_minutes: request.exercise_minutes,
        notes: request.notes,
        symptoms: request.symptoms,
        created_at: Utc::now(),
    };
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–ª–æ—Å—å –±—ã –≤ –ë–î
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    let health_context = create_health_context_from_wellbeing(&wellbeing);
    let message = generate_wellbeing_summary(&wellbeing);
    
    let response = assistant.get_personalized_response(&message, &health_context).await?;
    
    Ok(ResponseJson(response))
}

/// –ü–∞–Ω–µ–ª—å –∑–¥–æ—Ä–æ–≤—å—è —Å –∏–Ω—Å–∞–π—Ç–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
pub async fn health_dashboard(
    State(ai_service): State<AiService>,
) -> Result<ResponseJson<HealthDashboardResponse>, AppError> {
    let assistant = PersonalHealthAssistant::new(ai_service);
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å –±—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let health_context = create_mock_health_context();
    
    let insights = assistant.generate_health_insights(&health_context, "").await?;
    let recommendations = assistant.generate_personalized_recommendations(&health_context).await?;
    
    let dashboard = HealthDashboardResponse {
        current_wellbeing: health_context.recent_wellbeing.first().cloned(),
        insights,
        recommendations,
        weekly_trends: WeeklyTrends {
            avg_mood: 7.2,
            avg_energy: 6.8,
            avg_stress: 4.1,
            avg_sleep: 7.5,
            total_water_ml: 14000,
            total_exercise_minutes: 180,
        },
        motivational_message: "–í—ã –∑–∞–±–æ—Ç–∏—Ç–µ—Å—å –æ —Å–≤–æ–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —É–∂–µ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! –≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞. üåü".to_string(),
    };
    
    Ok(ResponseJson(dashboard))
}

/// –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
pub async fn get_recommendations(
    State(ai_service): State<AiService>,
) -> Result<ResponseJson<Vec<PersonalizedRecommendation>>, AppError> {
    let assistant = PersonalHealthAssistant::new(ai_service);
    let health_context = create_mock_health_context();
    
    let recommendations = assistant.generate_personalized_recommendations(&health_context).await?;
    
    Ok(ResponseJson(recommendations))
}

/// –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
pub async fn mood_analysis(
    State(ai_service): State<AiService>,
    Json(mood_data): Json<serde_json::Value>,
) -> Result<ResponseJson<PersonalizedResponse>, AppError> {
    let assistant = PersonalHealthAssistant::new(ai_service);
    
    let mood_score = mood_data["mood_score"].as_i64().unwrap_or(5) as i32;
    let notes = mood_data["notes"].as_str().unwrap_or("");
    
    let message = format!(
        "–ú–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è {} –∏–∑ 10. –ó–∞–º–µ—Ç–∫–∏: {}. –ü–æ–º–æ–≥–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç–º–æ—Ü–∏—è–º–∏ –∏ –¥–∞–π —Å–æ–≤–µ—Ç—ã.",
        mood_score, notes
    );
    
    let health_context = create_mock_health_context();
    let response = assistant.get_personalized_response(&message, &health_context).await?;
    
    Ok(ResponseJson(response))
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

fn create_mock_health_context() -> HealthContext {
    HealthContext {
        user_profile: UserHealthSummary {
            name: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞".to_string(),
            age: Some(28),
            fitness_level: FitnessLevel::ModeratelyActive,
            sleep_goal: Some(8.0),
            water_goal: Some(2000),
            dietary_restrictions: vec!["–±–µ–∑ –≥–ª—é—Ç–µ–Ω–∞".to_string()],
            health_goals: vec![
                "–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞".to_string(),
                "–°–Ω–∏–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞".to_string(),
                "–ë–æ–ª—å—à–µ –¥–≤–∏–≥–∞—Ç—å—Å—è".to_string(),
            ],
            medical_conditions: vec![],
            stress_level: Some(6),
        },
        recent_wellbeing: vec![
            DailyWellbeing {
                id: Uuid::new_v4(),
                user_id: Uuid::new_v4(),
                date: Utc::now(),
                mood_score: Some(7),
                energy_level: Some(6),
                stress_level: Some(5),
                sleep_hours: Some(7.2),
                sleep_quality: Some(7),
                water_intake_ml: Some(1800),
                exercise_minutes: Some(30),
                notes: None,
                symptoms: vec![],
                created_at: Utc::now(),
            }
        ],
        recent_nutrition: vec![
            NutritionSummary {
                date: Utc::now(),
                calories: 1850.0,
                protein: 85.0,
                carbs: 220.0,
                fat: 65.0,
                water_ml: 1800,
            }
        ],
        current_time: chrono::Local::now().format("%H:%M").to_string(),
        current_season: "–õ–µ—Ç–æ".to_string(),
        weather_context: Some("–°–æ–ª–Ω–µ—á–Ω–æ, +25¬∞C".to_string()),
    }
}

fn create_health_context_from_wellbeing(wellbeing: &DailyWellbeing) -> HealthContext {
    HealthContext {
        user_profile: UserHealthSummary {
            name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å".to_string(),
            age: Some(30),
            fitness_level: FitnessLevel::ModeratelyActive,
            sleep_goal: Some(8.0),
            water_goal: Some(2000),
            dietary_restrictions: vec![],
            health_goals: vec!["–£–ª—É—á—à–∏—Ç—å –æ–±—â–µ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ".to_string()],
            medical_conditions: vec![],
            stress_level: wellbeing.stress_level,
        },
        recent_wellbeing: vec![wellbeing.clone()],
        recent_nutrition: vec![],
        current_time: chrono::Local::now().format("%H:%M").to_string(),
        current_season: "–õ–µ—Ç–æ".to_string(),
        weather_context: None,
    }
}

fn generate_wellbeing_summary(wellbeing: &DailyWellbeing) -> String {
    let mut summary = "–í–æ—Ç –º–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:".to_string();
    
    if let Some(mood) = wellbeing.mood_score {
        summary.push_str(&format!(" –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ {}/10,", mood));
    }
    if let Some(energy) = wellbeing.energy_level {
        summary.push_str(&format!(" —ç–Ω–µ—Ä–≥–∏—è {}/10,", energy));
    }
    if let Some(stress) = wellbeing.stress_level {
        summary.push_str(&format!(" —Å—Ç—Ä–µ—Å—Å {}/10,", stress));
    }
    if let Some(sleep) = wellbeing.sleep_hours {
        summary.push_str(&format!(" —Å–ø–∞–ª {} —á–∞—Å–æ–≤,", sleep));
    }
    if let Some(water) = wellbeing.water_intake_ml {
        summary.push_str(&format!(" –≤—ã–ø–∏–ª {} –º–ª –≤–æ–¥—ã,", water));
    }
    
    if !wellbeing.symptoms.is_empty() {
        summary.push_str(&format!(" —Å–∏–º–ø—Ç–æ–º—ã: {}.", wellbeing.symptoms.join(", ")));
    }
    
    if let Some(notes) = &wellbeing.notes {
        summary.push_str(&format!(" –ó–∞–º–µ—Ç–∫–∏: {}", notes));
    }
    
    summary.push_str(" –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.");
    summary
}
