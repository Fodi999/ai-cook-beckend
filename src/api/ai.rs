use axum::{
    extract::{State, Json},
    response::Json as ResponseJson,
};
use serde::{Deserialize, Serialize};
use chrono::Timelike;
use rand::Rng;
use crate::services::ai::AiService;
use crate::utils::errors::AppError;

#[derive(Debug, Deserialize)]
pub struct AiChatRequest {
    pub message: String,
    pub context: Option<String>, // –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–µ–ª–∏, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ —Ç.–¥.)
}

#[derive(Debug, Serialize, Clone)]
pub struct AiCard {
    pub title: String,
    pub content: String,
    pub emoji: Option<String>,
    pub category: Option<String>, // nutrition, health, recipe, motivation, general
    pub priority: Option<String>, // high, medium, low
}

#[derive(Debug, Serialize)]
pub struct AiChatResponse {
    pub response: String,
    pub suggestions: Option<Vec<String>>, // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    pub cards: Option<Vec<AiCard>>, // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
}

#[derive(Debug, Deserialize)]
pub struct ProactiveMessageRequest {
    pub user_context: Option<String>, // –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ü–µ–ª–∏ –∏ —Ç.–¥.)
    pub last_meal_time: Option<String>, // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    pub mood_level: Option<i32>, // –£—Ä–æ–≤–µ–Ω—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç 1 –¥–æ 5
    pub energy_level: Option<i32>, // –£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –æ—Ç 1 –¥–æ 5
}

#[derive(Debug, Serialize, Clone)]
pub struct AiProactiveMessage {
    pub message: String,
    pub trigger_type: String, // breakfast, sleep, mood, activity, nutrition, motivation
    pub urgency: String, // high, medium, low
    pub cards: Option<Vec<AiCard>>,
    pub suggestions: Option<Vec<String>>,
}

#[derive(Debug, Deserialize)]
pub struct RecipeGenerationRequest {
    pub ingredients: Vec<String>,
    pub dietary_restrictions: Option<Vec<String>>,
    pub cuisine_type: Option<String>,
    pub cooking_time: Option<i32>, // –≤ –º–∏–Ω—É—Ç–∞—Ö
    pub difficulty: Option<String>,
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–æ–º
pub async fn chat_with_ai(
    State(ai_service): State<AiService>,
    Json(request): Json<AiChatRequest>,
) -> Result<ResponseJson<AiChatResponse>, AppError> {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    let context_prompt = if let Some(context) = &request.context {
        format!(
            "–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}. –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}",
            context,
            request.message
        )
    } else {
        format!(
            "–¢—ã - –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ IT Cook. –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏, —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ –≥–æ—Ç–æ–≤–∫–µ, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –ø–∏—Ç–∞–Ω–∏—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–µ–π. –í–æ–ø—Ä–æ—Å: {}",
            request.message
        )
    };

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
    let ai_response = ai_service.generate_response(&context_prompt).await?;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞
    let suggestions = generate_suggestions(&request.message, &ai_response);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    let cards = generate_response_cards(&request.message, &request.context);

    Ok(ResponseJson(AiChatResponse {
        response: ai_response,
        suggestions: Some(suggestions),
        cards,
    }))
}

/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
fn generate_suggestions(user_message: &str, _ai_response: &str) -> Vec<String> {
    let user_lower = user_message.to_lowercase();
    
    if user_lower.contains("—Å—É–ø") {
        vec![
            "–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Å—É–ø –±–æ–ª–µ–µ –≥—É—Å—Ç—ã–º?".to_string(),
            "–ö–∞–∫–∏–µ —Å–ø–µ—Ü–∏–∏ –ª—É—á—à–µ –¥–æ–±–∞–≤–∏—Ç—å?".to_string(),
            "–ü–æ–∫–∞–∂–∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—É–ø–æ–≤".to_string(),
        ]
    } else if user_lower.contains("—Å–∞–ª–∞—Ç") {
        vec![
            "–ö–∞–∫—É—é –∑–∞–ø—Ä–∞–≤–∫—É –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?".to_string(),
            "–ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∞–ª–∞—Ç —Å–≤–µ–∂–∏–º?".to_string(),
            "–ü–æ–∫–∞–∂–∏ —Ç–µ–ø–ª—ã–µ —Å–∞–ª–∞—Ç—ã".to_string(),
        ]
    } else if user_lower.contains("–º—è—Å–æ") || user_lower.contains("–∫—É—Ä–∏—Ü–∞") || user_lower.contains("–≥–æ–≤—è–¥–∏–Ω–∞") {
        vec![
            "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –º–∞—Ä–∏–Ω–æ–≤–∞—Ç—å –º—è—Å–æ?".to_string(),
            "–ü–æ–∫–∞–∂–∏ –≥–∞—Ä–Ω–∏—Ä—ã –∫ –º—è—Å—É".to_string(),
            "–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –º—è—Å–∞?".to_string(),
        ]
    } else if user_lower.contains("—Ä–µ—Ü–µ–ø—Ç") || user_lower.contains("–≥–æ—Ç–æ–≤–∏—Ç—å") {
        vec![
            "–ü–æ–∫–∞–∂–∏ –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏".to_string(),
            "–ö–∞–∫–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?".to_string(),
            "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–π–º–µ—Ç –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ?".to_string(),
        ]
    } else if user_lower.contains("–¥–∏–µ—Ç–∞") || user_lower.contains("–ø–æ—Ö—É–¥–µ—Ç—å") {
        vec![
            "–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é".to_string(),
            "–ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ª—É—á—à–µ –∏—Å–∫–ª—é—á–∏—Ç—å?".to_string(),
            "–ö–∞–∫ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏?".to_string(),
        ]
    } else if user_lower.contains("–ø—Ä–æ–¥—É–∫—Ç") || user_lower.contains("–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç") {
        vec![
            "–ß—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ —ç—Ç–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤?".to_string(),
            "–ö–∞–∫ –¥–æ–ª–≥–æ —Ö—Ä–∞–Ω—è—Ç—Å—è —ç—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã?".to_string(),
            "–ß–µ–º –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç?".to_string(),
        ]
    } else {
        vec![
            "–†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ –æ–± —ç—Ç–æ–º".to_string(),
            "–ü–æ–∫–∞–∂–∏ –ø–æ—Ö–æ–∂–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã".to_string(),
            "–î–∞–π –µ—â–µ –æ–¥–∏–Ω —Å–æ–≤–µ—Ç".to_string(),
        ]
    }
}

/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
fn generate_response_cards(user_message: &str, _context: &Option<String>) -> Option<Vec<AiCard>> {
    let user_lower = user_message.to_lowercase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –±–ª—é–¥–∞
    if user_lower.contains("—Å—É–ø") {
        Some(vec![
            AiCard {
                title: "üçú –ö—É—Ä–∏–Ω—ã–π —Å—É–ø –≥–æ—Ç–æ–≤!".to_string(),
                content: "–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –±–ª—é–¥–æ —Å –≤—ã—Å–æ–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –±–µ–ª–∫–∞".to_string(),
                emoji: Some("üçú".to_string()),
                category: Some("recipe".to_string()),
                priority: Some("high".to_string()),
            },
            AiCard {
                title: "ü•Ñ –°–æ–≤–µ—Ç –ø–æ –ø–æ–¥–∞—á–µ".to_string(),
                content: "–ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –∑–µ–ª–µ–Ω—å—é –∏ —Å—É—Ö–∞—Ä–∏–∫–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∫—É—Å–∞".to_string(),
                emoji: Some("ü•Ñ".to_string()),
                category: Some("general".to_string()),
                priority: Some("medium".to_string()),
            },
            AiCard {
                title: "üìä –ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å".to_string(),
                content: "~300 –∫–∫–∞–ª, 25–≥ –±–µ–ª–∫–∞ - –æ—Ç–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤".to_string(),
                emoji: Some("üìä".to_string()),
                category: Some("nutrition".to_string()),
                priority: Some("medium".to_string()),
            },
        ])
    } else if user_lower.contains("—Å–∞–ª–∞—Ç") {
        Some(vec![
            AiCard {
                title: "ü•ó –°–≤–µ–∂–∏–π —Å–∞–ª–∞—Ç".to_string(),
                content: "–õ–µ–≥–∫–æ–µ –∏ –ø–æ–ª–µ–∑–Ω–æ–µ –±–ª—é–¥–æ —Å –≤–∏—Ç–∞–º–∏–Ω–∞–º–∏".to_string(),
                emoji: Some("ü•ó".to_string()),
                category: Some("recipe".to_string()),
                priority: Some("high".to_string()),
            },
            AiCard {
                title: "üåø –ó–∞–ø—Ä–∞–≤–∫–∞".to_string(),
                content: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ –∏ –ª–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫".to_string(),
                emoji: Some("üåø".to_string()),
                category: Some("general".to_string()),
                priority: Some("medium".to_string()),
            },
        ])
    } else if user_lower.contains("–º—è—Å–æ") || user_lower.contains("–∫—É—Ä–∏—Ü–∞") || user_lower.contains("–≥–æ–≤—è–¥–∏–Ω–∞") {
        Some(vec![
            AiCard {
                title: "üçñ –ú—è—Å–Ω–æ–µ –±–ª—é–¥–æ".to_string(),
                content: "–û—Ç–ª–∏—á–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –±–µ–ª–∫–∞ –¥–ª—è —Ä–æ—Å—Ç–∞ –º—ã—à—Ü".to_string(),
                emoji: Some("üçñ".to_string()),
                category: Some("recipe".to_string()),
                priority: Some("high".to_string()),
            },
            AiCard {
                title: "üî• –°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è".to_string(),
                content: "–ó–∞–ø–µ–∫–∞–Ω–∏–µ –∏–ª–∏ –≥—Ä–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—è—Ç –±–æ–ª—å—à–µ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤".to_string(),
                emoji: Some("üî•".to_string()),
                category: Some("health".to_string()),
                priority: Some("medium".to_string()),
            },
        ])
    } else if user_lower.contains("—Ä–µ—Ü–µ–ø—Ç") || user_lower.contains("–≥–æ—Ç–æ–≤–∏—Ç—å") || user_lower.contains("–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å") {
        Some(vec![
            AiCard {
                title: "üç≥ –°–æ–≤–µ—Ç –ø–æ –≥–æ—Ç–æ–≤–∫–µ".to_string(),
                content: "–í—Å–µ–≥–¥–∞ —Ä–∞–∑–æ–≥—Ä–µ–≤–∞–π—Ç–µ —Å–∫–æ–≤–æ—Ä–æ–¥—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–∞—Å–ª–∞".to_string(),
                emoji: Some("üç≥".to_string()),
                category: Some("recipe".to_string()),
                priority: Some("medium".to_string()),
            },
            AiCard {
                title: "‚è±Ô∏è –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏".to_string(),
                content: "–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∑–∞—Ä–∞–Ω–µ–µ".to_string(),
                emoji: Some("‚è±Ô∏è".to_string()),
                category: Some("general".to_string()),
                priority: Some("low".to_string()),
            },
        ])
    } else if user_lower.contains("–¥–∏–µ—Ç–∞") || user_lower.contains("–ø–æ—Ö—É–¥–µ—Ç—å") {
        Some(vec![
            AiCard {
                title: "ü•ó –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ".to_string(),
                content: "–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ–≤–æ—â–µ–π –∏ –±–µ–ª–∫–∞".to_string(),
                emoji: Some("ü•ó".to_string()),
                category: Some("nutrition".to_string()),
                priority: Some("high".to_string()),
            },
            AiCard {
                title: "üíß –ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è".to_string(),
                content: "–ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è".to_string(),
                emoji: Some("üíß".to_string()),
                category: Some("health".to_string()),
                priority: Some("medium".to_string()),
            },
        ])
    } else if user_lower.contains("–ø—Ä–∏–≤–µ—Ç") || user_lower.contains("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π") {
        Some(vec![
            AiCard {
                title: "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!".to_string(),
                content: "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?".to_string(),
                emoji: Some("üëã".to_string()),
                category: Some("general".to_string()),
                priority: Some("high".to_string()),
            },
            AiCard {
                title: "‚ú® –ù–∞—á–Ω–∏—Ç–µ —Å —Ü–µ–ª–µ–π".to_string(),
                content: "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –æ –≤–∞—à–∏—Ö –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö".to_string(),
                emoji: Some("‚ú®".to_string()),
                category: Some("motivation".to_string()),
                priority: Some("medium".to_string()),
            },
        ])
    } else {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ª—é–±–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        Some(vec![
            AiCard {
                title: "üí° –ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π —Å–æ–≤–µ—Ç".to_string(),
                content: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–µ–∂—É—é –∑–µ–ª–µ–Ω—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∫—É—Å–∞".to_string(),
                emoji: Some("üí°".to_string()),
                category: Some("general".to_string()),
                priority: Some("medium".to_string()),
            },
            AiCard {
                title: "üçΩÔ∏è –ü–æ–¥–∞—á–∞ –±–ª—é–¥–∞".to_string(),
                content: "–ö—Ä–∞—Å–∏–≤–∞—è –ø–æ–¥–∞—á–∞ –¥–µ–ª–∞–µ—Ç –µ–¥—É –µ—â–µ –≤–∫—É—Å–Ω–µ–µ".to_string(),
                emoji: Some("üçΩÔ∏è".to_string()),
                category: Some("general".to_string()),
                priority: Some("low".to_string()),
            },
        ])
    }
}

/// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
pub async fn generate_recipe(
    State(ai_service): State<AiService>,
    Json(request): Json<RecipeGenerationRequest>,
) -> Result<ResponseJson<AiChatResponse>, AppError> {
    let mut prompt = format!(
        "–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {}",
        request.ingredients.join(", ")
    );

    if let Some(restrictions) = &request.dietary_restrictions {
        prompt.push_str(&format!(". –£—á—Ç–∏ –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {}", restrictions.join(", ")));
    }

    if let Some(cuisine) = &request.cuisine_type {
        prompt.push_str(&format!(". –°—Ç–∏–ª—å –∫—É—Ö–Ω–∏: {}", cuisine));
    }

    if let Some(time) = request.cooking_time {
        prompt.push_str(&format!(". –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –Ω–µ –±–æ–ª–µ–µ {} –º–∏–Ω—É—Ç", time));
    }

    if let Some(difficulty) = &request.difficulty {
        prompt.push_str(&format!(". –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {}", difficulty));
    }

    prompt.push_str(". –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å: –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏, –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è, –∏ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥–∞—á–µ.");

    let ai_response = ai_service.generate_response(&prompt).await?;

    Ok(ResponseJson(AiChatResponse {
        response: ai_response,
        suggestions: Some(vec![
            "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã".to_string(),
            "–£–ø—Ä–æ—Å—Ç–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç".to_string(),
            "–î–æ–±–∞–≤–∏—Ç—å –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å".to_string(),
        ]),
        cards: Some(vec![
            AiCard {
                title: "üç≥ –†–µ—Ü–µ–ø—Ç –≥–æ—Ç–æ–≤!".to_string(),
                content: "–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤".to_string(),
                emoji: Some("üç≥".to_string()),
                category: Some("recipe".to_string()),
                priority: Some("high".to_string()),
            },
        ]),
    }))
}

#[derive(Debug, Deserialize)]
pub struct NutritionAnalysisRequest {
    pub recipe_text: String,
    pub servings: Option<i32>,
}

/// –ê–Ω–∞–ª–∏–∑ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—Ü–µ–ø—Ç–∞
pub async fn analyze_nutrition(
    State(ai_service): State<AiService>,
    Json(request): Json<NutritionAnalysisRequest>,
) -> Result<ResponseJson<AiChatResponse>, AppError> {
    let servings = request.servings.unwrap_or(1);
    
    let prompt = format!(
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å —ç—Ç–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–∞ {} –ø–æ—Ä—Ü–∏–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ª–æ—Ä–∏—è—Ö, –±–µ–ª–∫–∞—Ö, –∂–∏—Ä–∞—Ö, —É–≥–ª–µ–≤–æ–¥–∞—Ö, –≤–∏—Ç–∞–º–∏–Ω–∞—Ö –∏ –º–∏–Ω–µ—Ä–∞–ª–∞—Ö. –†–µ—Ü–µ–ø—Ç: {}",
        servings,
        request.recipe_text
    );

    let ai_response = ai_service.generate_response(&prompt).await?;

    Ok(ResponseJson(AiChatResponse {
        response: ai_response,
        suggestions: Some(vec![
            "–ö–∞–∫ —Å–Ω–∏–∑–∏—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å?".to_string(),
            "–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –±–µ–ª–∫–∞".to_string(),
            "–°–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã–º".to_string(),
        ]),
        cards: Some(vec![
            AiCard {
                title: "üìä –ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è".to_string(),
                content: "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –±–ª—é–¥–∞".to_string(),
                emoji: Some("üìä".to_string()),
                category: Some("nutrition".to_string()),
                priority: Some("high".to_string()),
            },
        ]),
    }))
}

/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ò–ò –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å
pub async fn generate_proactive_message(
    _state: State<AiService>,
    Json(request): Json<ProactiveMessageRequest>,
) -> Result<ResponseJson<AiProactiveMessage>, AppError> {
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    let current_hour = chrono::Utc::now().hour();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    let proactive_message = generate_contextual_proactive_message(current_hour, &request);
    
    Ok(ResponseJson(proactive_message))
}

/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
fn generate_contextual_proactive_message(hour: u32, request: &ProactiveMessageRequest) -> AiProactiveMessage {
    use rand::Rng;
    let mut rng = rand::thread_rng();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    let is_low_mood = request.mood_level.map_or(false, |mood| mood <= 3);
    let is_low_energy = request.energy_level.map_or(false, |energy| energy <= 3);
    
    // –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (6:00 - 11:00)
    if hour >= 6 && hour < 11 {
        let morning_messages = if is_low_energy {
            vec![
                AiProactiveMessage {
                    message: "üåÖ –í–∏–∂—É, —ç–Ω–µ—Ä–≥–∏–∏ –º–∞–ª–æ–≤–∞—Ç–æ —Å —É—Ç—Ä–∞! –•–æ—á–µ—à—å —Ä–µ—Ü–µ–ø—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞ –∑–∞ 5 –º–∏–Ω—É—Ç? –û–Ω –∑–∞—Ä—è–¥–∏—Ç —Ç–µ–±—è –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å!".to_string(),
                    trigger_type: "breakfast".to_string(),
                    urgency: "high".to_string(),
                    cards: Some(vec![
                        AiCard {
                            title: "‚ö° –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–≤—Ç—Ä–∞–∫".to_string(),
                            content: "–ë–∞–Ω–∞–Ω–æ–≤—ã–π —Å–º—É–∑–∏ —Å –æ–≤—Å—è–Ω–∫–æ–π –∏ –æ—Ä–µ—Ö–∞–º–∏ - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∑–∞—Ä—è–¥!".to_string(),
                            emoji: Some("‚ö°".to_string()),
                            category: Some("recipe".to_string()),
                            priority: Some("high".to_string()),
                        },
                        AiCard {
                            title: "‚òï –ë–æ–¥—Ä—è—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫".to_string(),
                            content: "–ó–µ–ª–µ–Ω—ã–π —á–∞–π —Å –∏–º–±–∏—Ä–µ–º —Ä–∞–∑–≥–æ–Ω–∏—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º".to_string(),
                            emoji: Some("‚òï".to_string()),
                            category: Some("health".to_string()),
                            priority: Some("high".to_string()),
                        },
                    ]),
                    suggestions: Some(vec![
                        "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏".to_string(),
                        "–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏".to_string(),
                        "–ë—ã—Å—Ç—Ä—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞ —É—Ç—Ä–æ".to_string(),
                    ]),
                },
            ]
        } else {
            vec![
                AiProactiveMessage {
                    message: "‚òÄÔ∏è –ö–∞–∫ —Å–ø–∞–ª–æ—Å—å? –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–Ω - —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ —Ç–≤–æ–µ–π —ç–Ω–µ—Ä–≥–∏–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å!".to_string(),
                    trigger_type: "sleep".to_string(),
                    urgency: "medium".to_string(),
                    cards: Some(vec![
                        AiCard {
                            title: "üí§ –°–æ–Ω –∏ –ø–∏—Ç–∞–Ω–∏–µ".to_string(),
                            content: "–ù–µ–¥–æ—Å—ã–ø —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ç—è–≥—É –∫ —Å–ª–∞–¥–∫–æ–º—É –Ω–∞ 30%".to_string(),
                            emoji: Some("üí§".to_string()),
                            category: Some("health".to_string()),
                            priority: Some("high".to_string()),
                        },
                        AiCard {
                            title: "ü•õ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫".to_string(),
                            content: "–ë–µ–ª–∫–∏ + —Å–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã = —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è".to_string(),
                            emoji: Some("ü•õ".to_string()),
                            category: Some("nutrition".to_string()),
                            priority: Some("medium".to_string()),
                        },
                    ]),
                    suggestions: Some(vec![
                        "–ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ —Å–Ω–∞".to_string(),
                        "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–≤—Ç—Ä–∞–∫–∏".to_string(),
                        "–†–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è –∏ —Å–Ω–∞".to_string(),
                    ]),
                },
                AiProactiveMessage {
                    message: "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –Ø –≤–∏–∂—É, —Ç—ã –Ω–µ –∑–∞–≤—Ç—Ä–∞–∫–∞–ª. –•–æ—á–µ—à—å —Ä–µ—Ü–µ–ø—Ç –∑–∞ 5 –º–∏–Ω—É—Ç? –ë—ã—Å—Ç—Ä–æ, –≤–∫—É—Å–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ!".to_string(),
                    trigger_type: "breakfast".to_string(),
                    urgency: "medium".to_string(),
                    cards: Some(vec![
                        AiCard {
                            title: "‚è±Ô∏è 5-–º–∏–Ω—É—Ç–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫".to_string(),
                            content: "–ê–≤–æ–∫–∞–¥–æ —Ç–æ—Å—Ç —Å —è–π—Ü–æ–º - –≥–æ—Ç–æ–≤ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ!".to_string(),
                            emoji: Some("‚è±Ô∏è".to_string()),
                            category: Some("recipe".to_string()),
                            priority: Some("high".to_string()),
                        },
                        AiCard {
                            title: "üçå –ë—ã—Å—Ç—Ä–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞".to_string(),
                            content: "–ì—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç —Å —è–≥–æ–¥–∞–º–∏ –∏ –º—ë–¥–æ–º".to_string(),
                            emoji: Some("üçå".to_string()),
                            category: Some("recipe".to_string()),
                            priority: Some("medium".to_string()),
                        },
                    ]),
                    suggestions: Some(vec![
                        "–ë—ã—Å—Ç—Ä—ã–µ –∑–∞–≤—Ç—Ä–∞–∫–∏".to_string(),
                        "–ß—Ç–æ –ø–∏—Ç—å —Å —É—Ç—Ä–∞?".to_string(),
                        "–ü–æ–ª–µ–∑–Ω—ã–µ –ø–µ—Ä–µ–∫—É—Å—ã".to_string(),
                    ]),
                },
            ]
        };
        return morning_messages[rng.gen_range(0..morning_messages.len())].clone();
    }
    
    // –î–Ω–µ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (11:00 - 17:00)
    if hour >= 11 && hour < 17 {
        let day_messages = if is_low_mood {
            vec![
                AiProactiveMessage {
                    message: "üòî –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ 3/5? –ü–æ–Ω–∏–º–∞—é... –ü—Ä–µ–¥–ª–∞–≥–∞—é —Å—Ö–æ–¥–∏—Ç—å –≤ –ø–∞—Ä–∫! üå≥ –°–≤–µ–∂–∏–π –≤–æ–∑–¥—É—Ö –∏ –¥–≤–∏–∂–µ–Ω–∏–µ —Ç–≤–æ—Ä—è—Ç —á—É–¥–µ—Å–∞ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º!".to_string(),
                    trigger_type: "mood".to_string(),
                    urgency: "high".to_string(),
                    cards: Some(vec![
                        AiCard {
                            title: "üå≥ –°–∏–ª–∞ –ø—Ä–∏—Ä–æ–¥—ã".to_string(),
                            content: "15 –º–∏–Ω—É—Ç –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ –ø–æ–≤—ã—à–∞—é—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ 40%".to_string(),
                            emoji: Some("üå≥".to_string()),
                            category: Some("motivation".to_string()),
                            priority: Some("high".to_string()),
                        },
                        AiCard {
                            title: "üç´ –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –∞–Ω—Ç–∏–¥–µ–ø—Ä–µ—Å—Å–∞–Ω—Ç—ã".to_string(),
                            content: "–¢–µ–º–Ω—ã–π —à–æ–∫–æ–ª–∞–¥ –∏ –æ—Ä–µ—Ö–∏ —Å—Ç–∏–º—É–ª–∏—Ä—É—é—Ç –≤—ã—Ä–∞–±–æ—Ç–∫—É —Å–µ—Ä–æ—Ç–æ–Ω–∏–Ω–∞".to_string(),
                            emoji: Some("üç´".to_string()),
                            category: Some("health".to_string()),
                            priority: Some("medium".to_string()),
                        },
                    ]),
                    suggestions: Some(vec![
                        "–ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è".to_string(),
                        "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ".to_string(),
                        "–ë—ã—Å—Ç—Ä—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è".to_string(),
                    ]),
                },
            ]
        } else {
            vec![
                AiProactiveMessage {
                    message: "üåû –î–µ–Ω—å –≤ —Ä–∞–∑–≥–∞—Ä–µ! –ö–∞–∫ —Ç–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è? –ï—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–ø–∞–¥, –ø—Ä–µ–¥–ª–∞–≥–∞—é –∑–¥–æ—Ä–æ–≤—ã–π –ø–µ—Ä–µ–∫—É—Å –¥–ª—è –ø–æ–¥–∑–∞—Ä—è–¥–∫–∏!".to_string(),
                    trigger_type: "energy".to_string(),
                    urgency: "medium".to_string(),
                    cards: Some(vec![
                        AiCard {
                            title: "ü•ú –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∫—É—Å".to_string(),
                            content: "–ú–∏–Ω–¥–∞–ª—å + —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç—ã = –ø—Ä–∏—Ä–æ–¥–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –±–µ–∑ —Å–∞—Ö–∞—Ä–Ω—ã—Ö —Å–∫–∞—á–∫–æ–≤".to_string(),
                            emoji: Some("ü•ú".to_string()),
                            category: Some("nutrition".to_string()),
                            priority: Some("high".to_string()),
                        },
                        AiCard {
                            title: "üö∂‚Äç‚ôÇÔ∏è –ú–∏–∫—Ä–æ-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å".to_string(),
                            content: "5-–º–∏–Ω—É—Ç–Ω–∞—è —Ä–∞–∑–º–∏–Ω–∫–∞ –ª—É—á—à–µ –∫–æ—Ñ–µ –¥–ª—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏".to_string(),
                            emoji: Some("üö∂‚Äç‚ôÇÔ∏è".to_string()),
                            category: Some("motivation".to_string()),
                            priority: Some("medium".to_string()),
                        },
                    ]),
                    suggestions: Some(vec![
                        "–ó–¥–æ—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–∫—É—Å—ã".to_string(),
                        "–ë—ã—Å—Ç—Ä—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è".to_string(),
                        "–ü–æ–ª–µ–∑–Ω—ã–µ —Å–ª–∞–¥–æ—Å—Ç–∏".to_string(),
                    ]),
                },
            ]
        };
        return day_messages[rng.gen_range(0..day_messages.len())].clone();
    }
    
    // –í–µ—á–µ—Ä–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (17:00 - 22:00)
    if hour >= 17 && hour < 22 {
        let evening_messages = vec![
            AiProactiveMessage {
                message: "üåÖ –î–µ–Ω—å –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É! –ö–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è? –î–∞–≤–∞–π –ø–æ–¥–≤–µ–¥–µ–º –∏—Ç–æ–≥–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º—Å—è –∫ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º—É –¥–Ω—é.".to_string(),
                trigger_type: "nutrition".to_string(),
                urgency: "medium".to_string(),
                cards: Some(vec![
                    AiCard {
                        title: "üìä –ò—Ç–æ–≥–∏ –¥–Ω—è".to_string(),
                        content: "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –±–∞–ª–∞–Ω—Å –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è".to_string(),
                        emoji: Some("üìä".to_string()),
                        category: Some("nutrition".to_string()),
                        priority: Some("high".to_string()),
                    },
                    AiCard {
                        title: "üåô –õ–µ–≥–∫–∏–π —É–∂–∏–Ω".to_string(),
                        content: "–£–∂–∏–Ω–∞–π –∑–∞ 2-3 —á–∞—Å–∞ –¥–æ —Å–Ω–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è".to_string(),
                        emoji: Some("üåô".to_string()),
                        category: Some("health".to_string()),
                        priority: Some("medium".to_string()),
                    },
                ]),
                suggestions: Some(vec![
                    "–ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å".to_string(),
                    "–õ–µ–≥–∫–∏–µ —É–∂–∏–Ω—ã".to_string(),
                    "–ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞".to_string(),
                ]),
            },
            AiProactiveMessage {
                message: "üéØ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å–µ–≥–æ–¥–Ω—è! –ü–æ–º–Ω–∏: –∫–∞–∂–¥–æ–µ –∑–¥–æ—Ä–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ - —ç—Ç–æ —à–∞–≥ –∫ —Ç–≤–æ–µ–π —Ü–µ–ª–∏. –ì–æ—Ä–¥–∏—Å—å —Å–æ–±–æ–π!".to_string(),
                trigger_type: "motivation".to_string(),
                urgency: "low".to_string(),
                cards: Some(vec![
                    AiCard {
                        title: "üèÜ –¢—ã –º–æ–ª–æ–¥–µ—Ü!".to_string(),
                        content: "–ö–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –≤ –ø–∏—Ç–∞–Ω–∏–∏ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É".to_string(),
                        emoji: Some("üèÜ".to_string()),
                        category: Some("motivation".to_string()),
                        priority: Some("high".to_string()),
                    },
                    AiCard {
                        title: "üìÖ –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–µ —Ü–µ–ª–∏".to_string(),
                        content: "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–∏–Ω–∞ - –∑–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è".to_string(),
                        emoji: Some("üìÖ".to_string()),
                        category: Some("general".to_string()),
                        priority: Some("medium".to_string()),
                    },
                ]),
                suggestions: Some(vec![
                    "–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è".to_string(),
                    "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞".to_string(),
                    "–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã".to_string(),
                ]),
            },
        ];
        return evening_messages[rng.gen_range(0..evening_messages.len())].clone();
    }
    
    // –ù–æ—á–Ω—ã–µ/–ø–æ–∑–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (22:00 - 6:00)
    AiProactiveMessage {
        message: "üåô –î–æ–≤–æ–ª—å–Ω–æ –ø–æ–∑–¥–Ω–æ! –•–æ—Ä–æ—à–∏–π —Å–æ–Ω - –æ—Å–Ω–æ–≤–∞ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –∑–∞–≤—Ç—Ä–∞. –ú–æ–∂–µ—Ç, –ø–æ—Ä–∞ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å?".to_string(),
        trigger_type: "sleep".to_string(),
        urgency: "high".to_string(),
        cards: Some(vec![
            AiCard {
                title: "üò¥ –í–∞–∂–Ω–æ—Å—Ç—å —Å–Ω–∞".to_string(),
                content: "7-8 —á–∞—Å–æ–≤ —Å–Ω–∞ –ø–æ–º–æ–≥–∞—é—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∞–ø–ø–µ—Ç–∏—Ç –∏ –≤–µ—Å".to_string(),
                emoji: Some("üò¥".to_string()),
                category: Some("health".to_string()),
                priority: Some("high".to_string()),
            },
            AiCard {
                title: "üõèÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ —Å–Ω—É".to_string(),
                content: "–¢—Ä–∞–≤—è–Ω–æ–π —á–∞–π –∏ –æ—Ç–∫–∞–∑ –æ—Ç —ç–∫—Ä–∞–Ω–æ–≤ –∑–∞ —á–∞—Å –¥–æ —Å–Ω–∞".to_string(),
                emoji: Some("üõèÔ∏è".to_string()),
                category: Some("health".to_string()),
                priority: Some("medium".to_string()),
            },
        ]),
        suggestions: Some(vec![
            "–ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —Å–Ω–∞".to_string(),
            "–í–µ—á–µ—Ä–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã".to_string(),
            "–†–µ–∂–∏–º –æ—Ç–¥—ã—Ö–∞".to_string(),
        ]),
    }
}
